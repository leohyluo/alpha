package com.alpha.self.diagnosis.controller;

import com.alpha.commons.core.service.SysSequenceService;
import com.alpha.commons.web.ResponseMessage;
import com.alpha.commons.web.ResponseStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Created by xc.xiong on 2017/9/1.
 * 问诊流程
 */
@RestController
@RequestMapping("/diagnosis")
public class DiagnosisController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DiagnosisController.class);

    @Autowired
    private SysSequenceService sysSequenceService;

    /**
     * 开始问诊，生成问诊编号
     *
     * @param userId 用户本人编号
     * @param inType 渠道标识
     * @return diagnosisId  唯一诊断编号
     */
    @RequestMapping("/start")
    public ResponseMessage diagnosisStart(Long userId, Integer inType) {
        LOGGER.info("生成问诊编号,为导诊做准备: {} {}", userId, inType);
        Integer diagnosisId = sysSequenceService.getNextSequence("diagnosis_seq");

        return new ResponseMessage(diagnosisId);
    }

    /**
     * 循环获取下一个问题
     * 接受答案信息
     * 如果没有问题编号，从第一个开始
     * @param userId 用户本人编号
     * @param inType 渠道标识
     * @return diagnosisId  唯一诊断编号
     */
    @RequestMapping("/next")
    public ResponseMessage diagnosisNext(Long userId, Integer inType, Integer diagnosisId, Integer questionId, String answers) {
        LOGGER.info("循环获取下一个问题: {} {} {}", userId,questionId, answers);
        if (diagnosisId == null)
            return new ResponseMessage(ResponseStatus.INVALID_VALUE);

        return new ResponseMessage(diagnosisId);
    }

}
