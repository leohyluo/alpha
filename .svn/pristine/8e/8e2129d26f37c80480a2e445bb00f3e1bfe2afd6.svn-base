package com.alpha.user.service.impl;

import java.util.Date;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;

import com.alpha.commons.core.service.SysSequenceService;
import com.alpha.server.rpc.user.pojo.UserInfo;
import com.alpha.user.dao.UserInfoDao;
import com.alpha.user.service.UserInfoService;

@Service
public class UserInfoServiceImpl implements UserInfoService {

	@Resource
	private UserInfoDao uesrInfoDao;

	@Resource
	private SysSequenceService sysSequenceService;

	/**
	 * 根据第三方用户编号，渠道编号获取用户信息
	 * 如果没有用户信息，则创建一个新的用户
	 * @param userInfo
	 * @param inType
	 * @return
	 */
	public UserInfo updateUserInfo(UserInfo userInfo,int inType){
//		UserInfo user = userInfoMapper.getUserInfoByExternalUserId(userInfo.getExternalUserId(), inType);
		UserInfo user = uesrInfoDao.getUserInfoByExternalUserId(userInfo.getExternalUserId(), inType);

		if(user==null){
			userInfo.setUserId(sysSequenceService.getNextSequence("user_seq").longValue());
			userInfo.setInType(inType);
			userInfo.setCreateTime(new Date());
			userInfo.setLastUpdateTime(new Date());
			uesrInfoDao.insert(userInfo);
		}else{
			user.setLastUpdateTime(new Date());
			if(StringUtils.isNotEmpty(userInfo.getUserName()))
				user.setUserName(userInfo.getUserName());
			if(userInfo.getBirth()!=null)
				user.setBirth(userInfo.getBirth());

			if(userInfo.getGender()!=null)
				user.setGender(userInfo.getGender());

			if(StringUtils.isNotEmpty(userInfo.getIdcard()))
				user.setIdcard(userInfo.getIdcard());

			if(StringUtils.isNotEmpty(userInfo.getPhoneNumber()))
				user.setPhoneNumber(userInfo.getPhoneNumber());

			if(StringUtils.isNotEmpty(userInfo.getLiverFuncText()))
				user.setLiverFuncText(userInfo.getLiverFuncText());

			if(userInfo.getLiverFunc()!=null)
				user.setLiverFunc(userInfo.getLiverFunc());

			if(StringUtils.isNotEmpty(userInfo.getRenalFuncText()))
				user.setRenalFuncText(userInfo.getRenalFuncText());

			if(userInfo.getRenalFunc()!=null)
				user.setRenalFunc(userInfo.getRenalFunc());

			if(StringUtils.isNotEmpty(userInfo.getWeight()))
				user.setWeight(userInfo.getWeight());

			if(StringUtils.isNotEmpty(userInfo.getHeight()))
				user.setHeight(userInfo.getHeight());

			if(StringUtils.isNotEmpty(userInfo.getSpecialPeriod()))
				user.setSpecialPeriod(userInfo.getSpecialPeriod());

			if(StringUtils.isNotEmpty(userInfo.getFertilityType()))
				user.setFertilityType(userInfo.getFertilityType());

			if(StringUtils.isNotEmpty(userInfo.getGestationalAge()))
				user.setGestationalAge(userInfo.getGestationalAge());

			if(StringUtils.isNotEmpty(userInfo.getFeedType()))
				user.setFeedType(userInfo.getFeedType());

			if(StringUtils.isNotEmpty(userInfo.getPastmedicalHistoryCode()))
				user.setPastmedicalHistoryCode(userInfo.getPastmedicalHistoryCode());

			if(StringUtils.isNotEmpty(userInfo.getPastmedicalHistoryText()))
				user.setPastmedicalHistoryText(userInfo.getPastmedicalHistoryText());

			if(StringUtils.isNotEmpty(userInfo.getAllergicHistoryCode()))
				user.setAllergicHistoryCode(userInfo.getAllergicHistoryCode());

			if(StringUtils.isNotEmpty(userInfo.getAllergicHistoryText()))
				user.setAllergicHistoryText(userInfo.getAllergicHistoryText());
			uesrInfoDao.update(user);
		}
		return userInfo;
	}

	@Override
	public UserInfo queryByUserId(Long userId) {
		return uesrInfoDao.queryByUserId(userId);
	}

	@Override
	public UserInfo save(UserInfo userInfo) {
		// TODO Auto-generated method stub
		return null;
	}
}
