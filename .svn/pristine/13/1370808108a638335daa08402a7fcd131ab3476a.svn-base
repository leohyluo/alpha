package com.alpha.self.diagnosis.processor;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.alpha.commons.enums.BasicQuestionType;
import com.alpha.commons.util.DateUtils;
import com.alpha.self.diagnosis.annotation.BasicAnswerProcessor;
import com.alpha.self.diagnosis.pojo.BasicQuestion;
import com.alpha.self.diagnosis.pojo.vo.BasicAnswerVo;
import com.alpha.self.diagnosis.pojo.vo.BasicQuestionVo;
import com.alpha.self.diagnosis.pojo.vo.IAnswerVo;
import com.alpha.self.diagnosis.pojo.vo.IQuestionVo;
import com.alpha.server.rpc.user.pojo.UserInfo;

@BasicAnswerProcessor
@Component
public class WeightProcessor extends AbstractBasicAnswerProcessor {
	
	private static final String QUESTION_CODE = BasicQuestionType.WEIGHT.getValue();

	protected List<IAnswerVo> queryAnswers(BasicQuestion question, UserInfo userInfo) {
		Date birth = userInfo.getBirth();
		float month = DateUtils.getDiffMonth(birth);
		float weight = 0;
		float defaultWeight = 3;	//默认3kg
		if(month < 24) {
			//≤6个月，体重=出生体重+月龄*0.7
			if(month <= 6) {
				weight = (float) (defaultWeight + month * 0.7);
			} else {
				//7-23月，体重=6+月龄*0.25
				weight = (float) (6 + month * 0.25);
			}
		}  else {
			float age = DateUtils.getAge(birth);
			if(age >=2 && age <= 6) {
				//2-6岁，体重=年龄（岁）*2+8；
				weight = age * 2 + 8;
			} else {
				//7-12岁，体重=年龄（岁）*3+2
				weight = age * 3 + 2;
			}
		}
		List<IAnswerVo> answervoList = new ArrayList<>();
		BasicAnswerVo answervo = new BasicAnswerVo();
		answervo.setAnswerTitle(weight + "kg");
		answervo.setDescription("");
		answervoList.add(answervo);
		return answervoList;
	}

	@Override
	protected String setQuestionCode() {
		return QUESTION_CODE;
	}
	
	@Override
	protected Map<String, List<IAnswerVo>> getAnswers(BasicQuestion question, UserInfo userInfo) {
		Map<String, List<IAnswerVo>> map = new HashMap<>();
		map.put(DEFAULT_ANSWER, this.queryAnswers(question, userInfo));
		return map;
	}

	@Override
	protected IQuestionVo getQuestionVo(Long diagnosisId, BasicQuestion question, UserInfo userInfo, Map<String, List<IAnswerVo>> data) {
		List<IAnswerVo> answers = data.get(DEFAULT_ANSWER);
		return new BasicQuestionVo(diagnosisId, question, answers, userInfo);
	}
}
