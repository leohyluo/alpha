package com.alpha.self.diagnosis.processor;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alpha.self.diagnosis.pojo.BasicQuestion;
import com.alpha.self.diagnosis.pojo.vo.IAnswerVo;
import com.alpha.self.diagnosis.pojo.vo.IQuestionVo;
import com.alpha.server.rpc.user.pojo.UserInfo;

public abstract class AbstractBasicAnswerProcessor {
	
	protected String DEFAULT_ANSWER = "default";
	
	private static Map<String, AbstractBasicAnswerProcessor> processorMap;
	
	static {
		processorMap = new HashMap<>();
	}
		
	/*public List<IAnswerVo> process(BasicQuestion question, UserInfo userInfo) {
		List<IAnswerVo> answervoList = queryAnswers(question, userInfo);
		return Optional.ofNullable(answervoList).orElseGet(ArrayList::new);
	} */
	
	protected void register(AbstractBasicAnswerProcessor obj) {
		processorMap.put(setQuestionCode(), obj);
	}
	
	protected abstract String setQuestionCode();
	
	//protected abstract List<IAnswerVo> queryAnswers(BasicQuestion question, UserInfo userInfo);
	
	/*new version*/
	public IQuestionVo build(Long diagnosisId, BasicQuestion question, UserInfo userInfo) {
		Map<String, List<IAnswerVo>> data = getAnswers(question, userInfo);
		IQuestionVo questionVo = getQuestionVo(diagnosisId, question, userInfo, data);
		return questionVo;
	}
	
	/**
	 * 获取问题下的答案(有可能数据源不一样，响应结果不一样)
	 * @param question
	 * @param userInfo
	 * @return
	 */
	protected abstract Map<String, List<IAnswerVo>> getAnswers(BasicQuestion question, UserInfo userInfo);
	
	protected abstract IQuestionVo getQuestionVo(Long diagnosisId, BasicQuestion question, UserInfo userInfo, Map<String, List<IAnswerVo>> data);
}
