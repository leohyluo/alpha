package com.alpha.self.diagnosis.service.impl;

import com.alibaba.fastjson.JSON;
import com.alpha.commons.core.sql.DataSet;
import com.alpha.commons.util.DateUtils;
import com.alpha.self.diagnosis.dao.DiagnosisMainSymptomsDao;
import com.alpha.self.diagnosis.dao.DiagnosisMainsympQuestionDao;
import com.alpha.self.diagnosis.dao.DiagnosisQuestionAnswerDao;
import com.alpha.self.diagnosis.dao.UserDiagnosisDetailDao;
import com.alpha.self.diagnosis.mapper.BasicAnswerMapper;
import com.alpha.self.diagnosis.pojo.BasicAnswer;
import com.alpha.self.diagnosis.pojo.enums.QuestionEnum;
import com.alpha.self.diagnosis.pojo.vo.BasicAnswerVo;
import com.alpha.self.diagnosis.pojo.vo.BasicQuestionVo;
import com.alpha.self.diagnosis.service.MedicineQuestionService;
import com.alpha.self.diagnosis.utils.ServiceUtil;
import com.alpha.server.rpc.diagnosis.pojo.DiagnosisMainSymptoms;
import com.alpha.server.rpc.diagnosis.pojo.DiagnosisMainsympQuestion;
import com.alpha.server.rpc.diagnosis.pojo.UserDiagnosisDetail;
import com.alpha.server.rpc.user.pojo.UserInfo;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by xc.xiong on 2017/9/6.
 */
@Service
public class MedicineQuestionServiceImpl implements MedicineQuestionService {

    @Resource
    DiagnosisMainSymptomsDao diagnosisMainSymptomsDao;
    @Resource
    DiagnosisMainsympQuestionDao diagnosisMainsympQuestionDao;
    @Resource
    DiagnosisQuestionAnswerDao diagnosisQuestionAnswerDao;
    @Resource
    UserDiagnosisDetailDao diagnosisDetailDao;

    /**
     * 生成主症状问题
     * 获取主症状数据
     * @return
     */
    public BasicQuestionVo mainSymptomsQuestion(Long diagnosisId){

        DataSet<DiagnosisMainSymptoms> dmsDateSet = diagnosisMainSymptomsDao.selectLimit(1, 1000);
        List<DiagnosisMainSymptoms> dmses = dmsDateSet.getRows();
        BasicQuestionVo questionVo = new BasicQuestionVo();
        List<BasicAnswerVo> basicAnswers = new ArrayList<>();
        for(DiagnosisMainSymptoms dms:dmses){
            BasicAnswerVo basicAnswer = new BasicAnswerVo();
            basicAnswer.setAnswerCode(dms.getSympCode());
            basicAnswer.setAnswerTitle(dms.getSympName());
            basicAnswer.setDefaultOrder(dms.getDefaultOrder());
            basicAnswer.setDescription(dms.getPopuName());
            basicAnswers.add(basicAnswer);
        }
        questionVo.setAnswers(basicAnswers);
        questionVo.setQuestionTitle("【xxx】的基本情况我已经清楚了解，现在告诉我最不舒服的是什么，我将调动全身的每一个细胞进行运算！");
        questionVo.setQuestionCode("2000");
        questionVo.setDiagnosisId(diagnosisId);
        questionVo.setType(QuestionEnum.主症状.ordinal());
        questionVo.setDisplayType("radio");
        return questionVo;
    }


    public BasicQuestionVo question(Long diagnosisId,BasicQuestionVo questionVo,UserInfo userInfo){
        if(questionVo==null)
            return mainSymptomsQuestion(diagnosisId);
        saveDiagnosisAnswer(questionVo);//保存问题答案
        String questionId = questionVo.getQuestionCode();
        DiagnosisMainsympQuestion dmQuestion = diagnosisMainsympQuestionDao.getDiagnosisMainsympQuestion(questionId);
        // 获取下一个问题

        // 生成诊断结果

        return null;
    }

    /**
     * 获取下一个问题
     * @param dmQuestion
     * @param userInfo
     * @return
     */
    public DiagnosisMainsympQuestion getNextDiagnosisMainsympQuestion(DiagnosisMainsympQuestion dmQuestion,UserInfo userInfo){
        List<DiagnosisMainsympQuestion> dmQuestions = diagnosisMainsympQuestionDao.listNextAllQuestion(dmQuestion.getMainSympCode(), dmQuestion.getDefaultOrder());
        if(dmQuestions.size()==0){
            return null;
        }
        for (DiagnosisMainsympQuestion question : dmQuestions) {
            if(question.getGender()!=null&&question.getGender()!=userInfo.getGender()){
                continue;
            }
            Date birch = userInfo.getBirth();
            float age = DateUtils.getAge(birch);

        }

        return null;
    }

    /**
     *  保存问题答案
     * @param questionVo
     */
    public void saveDiagnosisAnswer(BasicQuestionVo questionVo){
        List<String> answerCodes = new ArrayList<>();
        List<String> answerContents = new ArrayList<>();
        for(BasicAnswerVo answerVo:questionVo.getAnswers()) {
            answerCodes.add(answerVo.getAnswerCode());
            answerContents.add(answerVo.getAnswerTitle());
        }
        UserDiagnosisDetail udd = new UserDiagnosisDetail();
        udd.setDiagnosisId(questionVo.getDiagnosisId());
        udd.setMemberId(0L);
        udd.setUserId(0L);
        udd.setQuestionCode(ServiceUtil.arrayConvertToString(answerCodes));
        udd.setAnswerContent(ServiceUtil.arrayConvertToString(answerContents));
        udd.setAnswerJson(JSON.toJSONString(questionVo.getAnswers()));
        udd.setQuestionType(questionVo.getType());
        udd.setAnswerTime(new Date());
        diagnosisDetailDao.insert(udd);
    }

    public void nextMedicineQuestion(){

    }

}
