package com.alpha.self.diagnosis.controller;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alpha.commons.web.ResponseMessage;
import com.alpha.commons.web.ResponseStatus;
import com.alpha.commons.web.WebUtils;
import com.alpha.self.diagnosis.pojo.vo.BasicAnswerReplyVo;
import com.alpha.self.diagnosis.pojo.vo.BasicAnswerVo;
import com.alpha.self.diagnosis.pojo.vo.BasicQuestionVo;
import com.alpha.self.diagnosis.service.BasicQuestionService;
import com.alpha.self.diagnosis.service.DiagnosisService;
import com.alpha.self.diagnosis.service.MedicineQuestionService;

/**
 * Created by xc.xiong on 2017/9/1.
 * 问诊流程
 */
@RestController
@RequestMapping("/diagnosis")
public class DiagnosisController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DiagnosisController.class);

    @Resource
    private DiagnosisService diagnosisService;
    @Resource
    private BasicQuestionService basicQuestionService;
    @Resource
    private MedicineQuestionService medicineQuestionService;

    /**
     * 开始问诊，生成问诊编号
     *
     * @param userId 用户本人编号
     * @param inType 渠道标识
     * @return diagnosisId  唯一诊断编号
     */
    @PostMapping("/start")
    public ResponseMessage diagnosisStart(Long userId, Integer inType) {
        LOGGER.info("生成问诊编号,为导诊做准备: {} {}", userId, inType);
        BasicQuestionVo firstQuestion = diagnosisService.start(userId, inType);
        return WebUtils.buildSuccessResponseMessage(firstQuestion);
    }

    /**
     * 循环获取下一个问题
     * 接受答案信息
     * 如果没有问题编号，从第一个开始
     * @param userId 用户本人编号
     * @param inType 渠道标识
     * @return diagnosisId  唯一诊断编号
     */
    @PostMapping("/basic/next")
    public ResponseMessage diagnosisNext(Long userId, Integer inType, Long diagnosisId, String questionCode, String answers) {
        LOGGER.info("循环获取下一个问题: {} {}", userId, questionCode);
        if (diagnosisId == null) {
            return WebUtils.buildResponseMessage(ResponseStatus.REQUIRED_PARAMETER_MISSING);
        }
        try {
        	BasicAnswerReplyVo answerReply = JSON.parseObject(answers, BasicAnswerReplyVo.class);
        	BasicQuestionVo result = basicQuestionService.next(userId, inType, diagnosisId, questionCode, answerReply);
        	return WebUtils.buildSuccessResponseMessage(result);
		} catch (Exception e) {
			e.printStackTrace();
			return WebUtils.buildResponseMessage(ResponseStatus.EXCEPTION);
		}
    }


    @PostMapping("/test/question")
    public ResponseMessage medicineQuestion() {
        BasicQuestionVo basicQuestionVo = medicineQuestionService.mainSymptomsQuestion(1000L);
        return new ResponseMessage(basicQuestionVo);
//    	return null;
    }

}
